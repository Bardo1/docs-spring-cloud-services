---
title: Writing Client Applications
---

<strong><%= modified_date %></strong>

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-samples/traveler/tree/1.0.4">&#8220;traveler&#8221; repository</a> to follow along with the code in this subtopic._

To use a circuit breaker in a Spring application with a Circuit Breaker Dashboard service instance, you must add the dependencies listed in the <a href="/spring-cloud-services/client-dependencies.html">Client Dependencies</a> topic to your application's build file. Be sure to include the dependencies for <a href="/spring-cloud-services/client-dependencies.html#circuit-breaker-dashboard">Circuit Breaker Dashboard</a> as well.

## Apply the Circuit Breaker Pattern

To work with a Circuit Breaker Dashboard instance, your application must <a href="https://github.com/spring-cloud-samples/traveler/blob/1.0.4/agency/src/main/java/agency/AgencyApplication.java#L7-L15">include the ```@EnableCircuitBreaker``` annotation on a configuration class</a>.

```java
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
//...

@SpringBootApplication
@EnableDiscoveryClient
@RestController
@EnableCircuitBreaker
public class AgencyApplication {
    //...
```

To apply a circuit breaker to a method, <a href="https://github.com/spring-cloud-samples/traveler/blob/1.0.4/agency/src/main/java/agency/TravelAgent.java#L17-L20">annotate the method with ```@HystrixCommand```</a>, giving the annotation the name of a ```fallbackMethod```.

```java
    @HystrixCommand(fallbackMethod = "getBackupGuide")
    public String getGuide() {
        return restTemplate.getForObject("http://company/available", String.class);
    }
```

The `getGuide()` method uses a <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">`RestTemplate`</a> to obtain a guide name from another application called Company, which is registered with a Service Registry instance. (See the <a href="/spring-cloud-services/service-registry/index.html">Service Registry documentation</a>, specifically the <a href="/spring-cloud-services/service-registry/consuming-a-service.html">Consuming a Service</a> subtopic.) The method thus relies on the Company application to return a response, and if the Company application fails to do so, calls to `getGuide()` will fail. When the failures exceed the threshold, the breaker on `getGuide()` will open the circuit.

<p class='note'><strong>Note</strong>: You cannot apply <code>@HystrixCommand</code> directly to a <a href="https://github.com/Netflix/feign">Feign</a> client. Instead, call Feign client methods from a service class that is autowired as a Spring bean (either through the <a href="http://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/stereotype/Service.html"><code>@Service</code></a> or <a href="http://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/stereotype/Component.html"><code>@Component</code></a> annotations or by being declared as a <code>@Bean</code> in a configuration class) and annotate the service class methods with <code>@HystrixCommand</code>.</p>

While the circuit is open, the breaker redirects calls to the annotated method, and they instead call the designated `fallbackMethod`. The fallback method must be in the same class and have the same method signature (i.e., have the same return type and accept the same parameters) as the annotated method. In the Agency application, the `getGuide()` method on the `TravelAgent` class falls back to <a href="https://github.com/spring-cloud-samples/traveler/blob/1.0.4/agency/src/main/java/agency/TravelAgent.java#L22-L24">`getBackupGuide()`</a>.

```java
    String getBackupGuide() {
        return "None available! Your backup guide is: Cookie";
    }
```

If you wish, you may also annotate fallback methods themselves with ```@HystrixCommand``` to create a fallback chain.
