---
title: Using a Circuit Breaker
---

To apply the Circuit Breaker pattern, use the ```@EnableCircuitBreaker``` annotation in your Application's configuration class. You'll also need to annotate any method that could fail with ```@HystrixCommand``` along with a ```fallbackMethod```. ```fallbackMethod```s must be in the same class, and have the same method signature (return type and parameters), as the method that uses it. ```fallbackMethod```s can themselves be annotated with  ```@HystrixCommand``` to create a fallback chain.

Typcially, you'll want to add ```@HystrixCommand``` to methods that call a remote service, but for brevity, here is an example application which will delegate calls to the fallback method if the current minute is an even number.

*CircuitBreakerDemo.java*

```java
package demo;

import java.util.Calendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
@SpringBootApplication
@EnableCircuitBreaker
public class CircuitBreakerExample {

    public static void main(String[] args) {
       SpringApplication.run(CircuitBreakerExample.class, args);
    }

    @Autowired
    private FlakeyService service;

    @RequestMapping("/")
    public String hello() {
        return service.hello();
    }

    @Component
    public static class FlakeyService {

        @HystrixCommand(fallbackMethod="goodbye")
        public String hello() {
            if (Calendar.getInstance().get(Calendar.MINUTE) % 2 == 0) {
                throw new RuntimeException();
            }
            return "hello!";
        }

        String goodbye() {
            return "goodbye.";
        }

    }
}

```

*pom.xml*

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.mydomain</groupId>
  <artifactId>myapp</artifactId>
  <version>0.1.0</version>
  <packaging>jar</packaging>

  <parent>
    <groupId>io.pivotal.spring.cloud</groupId>
    <artifactId>spring-cloud-services-starter-parent</artifactId>
    <version>1.0.0.BUILD-SNAPSHOT</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <dependencies>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-circuit-breaker</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <url>https://repo.spring.io/libs-snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>spring-snapshots</id>
      <url>https://repo.spring.io/libs-snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

</project>

```

*src/main/resources/application.yml*

```yml
spring.application.name: circuit-breaker-example
```

