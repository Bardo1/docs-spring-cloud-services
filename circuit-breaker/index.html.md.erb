---
title: Circuit Breaker for Pivotal Cloud Foundry
---

## <a id="overview"></a>Overview ##

Circuit Breaker for Pivotal Cloud Foundry allows Spring applications running in Pivotal Cloud Foundry to use the [Circuit Breaker Pattern](http://martinfowler.com/bliki/CircuitBreaker.html).

Cloud native architectures are typically composed of multiple layers of distributed services, and end-user requests may be composed of multiple calls to these services. If a lower level service fails, the failure can cascade all the way up to the end-user and spread to other dependent services. Heavy traffic to a failing service can also make it difficult to repair.

Using Circuit Breakers can address these issues by providing a fallback mechanism when services fail, and "opening" the circuit when failures reach a certain threshold, so that failing or overwhelmed services are no longer bombarded and can have time to heal.

[Hystrix](https://github.com/Netflix/Hystrix) is used to implement the Circuit Breaker pattern and to provide a monitoring dashboard.

## <a id="create-dashboard"></a>Creating a Circuit Breaker Dashboard ##

1. Log into the Apps Manager as a Space Developer.

1. Select Circuit Breaker for Pivotal Cloud Foundry from the Marketplace.
   <%= image_tag("circuit-breaker/1_marketplace.png") %>

1. Select the desired plan for the new service.
   <%= image_tag("circuit-breaker/2_select_plan.png") %>

1. Provide a name for the new Config Server service (e.g. config-server) and click the Add button.
   <%= image_tag("circuit-breaker/3_instance_name.png") %>

1. Select the Manage link on the new service instance.
   <%= image_tag("circuit-breaker/4_service_successfully_added.png") %>

1. It may take a few minutes to provision the dashboard. Once it's ready, a link will appear. Click on the link to enter the dashboard.
   <%= image_tag("circuit-breaker/dashboard.png") %>

The Circuit Breaker Dashboard is now ready to be used.

## <a id="apps"></a>Applying the Circuit Breaker Pattern ##

To apply the Circuit Breaker pattern, use the ```@EnableCircuitBreaker``` annotation in your Application's configuration class. You'll also need to annotate any method that could fail with ```@HystrixCommand``` along with a ```fallbackMethod```. ```fallbackMethod```s must be in the same class, and have the same method signature (return type and parameters), as the method that uses it. ```fallbackMethod```s can themselves be annotated with  ```@HystrixCommand``` to create a fallback chain.

Typcially, you'll want to add ```@HystrixCommand``` to methods that call a remote service, but for brevity, here is an example application which will delegate calls to the fallback method if the current minute is an even number.

*CircuitBreakerDemo.java*

```java
package demo;

import java.util.Calendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
@SpringBootApplication
@EnableCircuitBreaker
public class CircuitBreakerExample {

    public static void main(String[] args) {
       SpringApplication.run(CircuitBreakerExample.class, args);
    }

    @Autowired
    private FlakeyService service;

    @RequestMapping("/")
    public String hello() {
        return service.hello();
    }

    @Component
    public static class FlakeyService {

        @HystrixCommand(fallbackMethod="goodbye")
        public String hello() {
            if (Calendar.getInstance().get(Calendar.MINUTE) % 2 == 0) {
                throw new RuntimeException();
            }
            return "hello!";
        }

        String goodbye() {
            return "goodbye.";
        }

    }
}

```

*pom.xml*

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>demo</groupId>
  <artifactId>circuit-breaker-example</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <parent>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-parent</artifactId>
    <version>1.0.2.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <properties>
    <!-- Override the managed version of the Pivotal Cloud Connectors dependencies -->
    <spring-cloud-connectors.version>1.2.0.RC1</spring-cloud-connectors.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-hystrix</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-netflix-hystrix-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-pivotal-cloudfoundry-connector</artifactId>
      <version>1.0.0.M1</version>
    </dependency>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-pivotal-spring-connector</artifactId>
      <version>1.0.0.M1</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <repository>
      <id>spring-milestones</id>
      <url>https://repo.spring.io/libs-milestone</url>
    </repository>
  </repositories>

</project>

```

*src/main/resources/application.yml*

```yml
spring.application.name: circuit-breaker-example
```

## <a id="apps"></a>Using the Circuit Breaker Dashboard ##
To use the Circuit Breaker dashboard, bind an app that contains ```@HystrixCommand```s to the Circuit Breaker service instance. Once bound and restaged, the app will update the dashboard with metrics that describe the health of its service calls.

With the example app above receiving no load, the dashboard will display the following:

<%= image_tag("circuit-breaker/dashboard-start.png") %>

To see the circuit breaker in action, use curl, JMeter, Apache Bench or similar to simulate load.

```
$ while true; do curl circuit-breaker-example.my-cf.com; done
```

Depending on the time, the example app will either respond with ```hello!``` indicating a sucessful service call, or ```goodbye.``` indicating that an Exception was thrown and the fallback method was used.

When service calls are sucessful, the circuit is closed, and the rate of calls per second and sucessful calls per 10 seconds is indicated.

<%= image_tag("circuit-breaker/dashboard-closed.png") %>

When service calls begin to fail, the rate of failed calls is indicated in red.

<%= image_tag("circuit-breaker/dashboard-opening.png") %>

When failures exceed their configured threshold (default of 20 failures in 5 seconds), the circuit is opened. The rate of short circuited calls is indicated in blue; these are calls that are going straight to the fallback method. There are still calls being made to the failing method at a rate of 1 every 5 seconds, as indicated in red; this is necessary to determine if sucessful calls can be made, and if the circuit can be closed.

<%= image_tag("circuit-breaker/dashboard-open.png") %>

At no point does the example app return a non-200 response to the requestor.
