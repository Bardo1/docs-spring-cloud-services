---
title: Service Registry for Pivotal Cloud Foundry
---

## <a id="overview"></a>Overview ##

Service Registry for Pivotal Cloud Foundry is a service which enables service discoverability for applications running in a Pivotal Cloud Foundry environment. Service Discovery is one of the key tenets of a microservice based architecture. Trying to hand configure each client or some form of convention can be very difficult to do and can be very brittle. [Eureka](https://github.com/Netflix/eureka) is the Netflix Service Discovery Server and Client and is the underlying technology behind the Service Registry.

When a client registers with the Service Registry, it provide meta-data about itself such as host and port. Eureka receives heartbeat messages from each instance belonging to a service. If the heartbeat fails over a certain time, the instance is normally removed from the registry.

## <a id="registering-service"></a>Registering a Service ##

To register an application in the Service Registry, use the ```@EnableDiscoveryClient``` annotation in your Application's configuration class.

*src/main/java/demo/DemoApplication.java*

```java
package demo;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.SpringApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new Greeting(name);
    }

    private static class Greeting {

        private static final String template = "Hello, %s!";

        private String message;

        public Greeting(String name) {
            this.message = String.format(template, name);
        }

        public String getMessage() {
            return this.message;
        }

    }

}

```

Configure the `spring.application.name` and `eureka.instance.hostname` to use the values from the app deployment. The `eureka.instance.nonSecurePort` must be set for compatibility with Pivotal Cloud Foundry.

*src/main/resources/application.yml*

```yml
spring:
  application:
    name: ${vcap.application.name}

eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80

```

The Spring Cloud Services starter POM pulls in the Spring Cloud Eureka and Connectors dependencies that are required to enable the Service Registry functionality on Pivotal Cloud Foundry.

*pom.xml*

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.mydomain</groupId>
  <artifactId>myapp</artifactId>
  <version>0.1.0</version>
  <packaging>jar</packaging>

  <parent>
    <groupId>io.pivotal.spring.cloud</groupId>
    <artifactId>spring-cloud-services-starter-parent</artifactId>
    <version>1.0.0.BUILD-SNAPSHOT</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <dependencies>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-service-registry</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <url>https://repo.spring.io/libs-snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>spring-snapshots</id>
      <url>https://repo.spring.io/libs-snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

</project>

```

## <a id="consuming-service"></a>Consuming the service from a client application ##

To consume an application from the Service Registry, again use the ```@EnableDiscoveryClient``` annotation in your Application's configuration class. What's significant to note is that the URL given to getForObject() has a host name of "greeting-service", which is the name for which the service is registered as in Eureka. In this way, the client doesnt need to know the actual URL of the service.

*src/main/java/demo/DemoApplication.java*

```java
package demo;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.SpringApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class DemoApplication {

    @Autowired
    private RestTemplate rest;

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    public String hello() {
        Greeting greeting = rest.getForObject("http://greeting-service/greeting", Greeting.class);
        return greeting.getMessage();
    }

    private static class Greeting {

        private String message;

        @JsonCreator
        public Greeting(@JsonProperty("message") String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }

    }

}

```

The dependencies for a consuming app are the same as a service.

*pom.xml*

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.springframework.demo</groupId>
    <artifactId>greeting-client</artifactId>
    <version>0.1.0</version>
    <packaging>jar</packaging>

    <name>greeting-client</name>
    <description>Demo project for Spring Cloud</description>

    <parent>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-parent</artifactId>
      <version>1.0.2.RELEASE</version>
      <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <properties>
      <!-- Override the managed version of the Pivotal Cloud Connectors dependencies -->
      <spring-cloud-connectors.version>1.2.0.RC1</spring-cloud-connectors.version>
    </properties>

    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
      </dependency>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-eureka</artifactId>
      </dependency>
      <dependency>
        <groupId>io.pivotal.spring.cloud</groupId>
        <artifactId>spring-cloud-pivotal-cloudfoundry-connector</artifactId>
        <version>1.0.0.M1</version>
      </dependency>
      <dependency>
        <groupId>io.pivotal.spring.cloud</groupId>
        <artifactId>spring-cloud-pivotal-spring-connector</artifactId>
        <version>1.0.0.M1</version>
      </dependency>
    </dependencies>

    <build>
      <plugins>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
      </plugins>
    </build>

    <repositories>
      <repository>
        <id>spring-milestones</id>
        <url>https://repo.spring.io/libs-milestone</url>
      </repository>
    </repositories>

</project>
```

## <a id="dashboard"></a>Using the Service Registry Dashboard ##

Before an application is bound to the Service Registry service instance, the dashboard reflects that there are "No applications registered".

<%= image_tag("service-registry/dashboard_empty.png") %>

To see applications on the Service Registry dashboard, bind an app that contains ```@EnableDiscoveryClient``` to the Service Registry service instance. Once bound and restaged, the dashboard will display each registered apps.

<%= image_tag("service-registry/dashboard_apps.png") %>
