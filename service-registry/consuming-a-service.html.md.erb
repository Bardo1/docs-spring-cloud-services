---
title: Consuming a Service from a Client Application
---

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-samples/greeting">"greeting" repository</a> to follow along with the code in this subtopic._

Follow the below instructions to consume a service registered with the Service Registry from a Spring application.

## Declaring Dependencies

To consume a service which is registered with a Service Registry instance, a Spring application must include the `spring-cloud-services-starter-parent` BOM and declare `spring-cloud-services-starter-service-registry` as a dependency.

If using Maven, <a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/pom.xml#L14-30">include in `pom.xml`</a>:

```xml
  <parent>
    <groupId>io.pivotal.spring.cloud</groupId>
    <artifactId>spring-cloud-services-starter-parent</artifactId>
    <version>1.0.0.BUILD-SNAPSHOT</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  ...
  <dependencies>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-service-registry</artifactId>
    </dependency>
    ...
```

If using Gradle, <a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/build.gradle#L22-43">include in `build.gradle`</a>:

```groovy
dependencyManagement {
    imports {
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-starter-parent:1.0.0.M1"
    }
}

...

dependencies {
    ...
    compile("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry")
}
```

(Note that this will require <a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/build.gradle#L5-13">use of the Gradle dependency management plugin</a>.)

You will also need to add `repo.spring.io/libs-snapshot` as a repository.

<a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/pom.xml#L59-67">Using Maven</a>:

```xml
  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <url>https://repo.spring.io/libs-snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/build.gradle#L31-36">Using Gradle</a>:

```java
repositories {
    ...
    maven {
        url "https://repo.spring.io/libs-snapshot"
    }
}
```

## Discovering and Consuming a Service

A consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/src/main/java/camelboy/CamelboyApplication.java#L21-27">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class CamelboyApplication {

    @Autowired
    private RestTemplate rest;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

The Expedition application is registered with the Service Registry instance as **expedition**, so in the Camelboy application, <a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/src/main/java/camelboy/CamelboyApplication.java#L34-44">the `hello()` method on the `CamelboyApplication` class</a> uses the base URI `http://expedition` to get a greeting message from Expedition.

```java
    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    public String hello(@RequestParam(value="salutation",
                                        defaultValue="Hello") String salutation,
                        @RequestParam(value="name",
                                        defaultValue="camel boy") String name) {
        URI uri = UriComponentsBuilder.fromUriString("http://expedition/greeting")
            .queryParam("salutation", salutation)
            .queryParam("name", name)
            .build()
            .toUri();

        Greeting greeting = rest.getForObject(uri, Greeting.class);
        return greeting.getMessage();
    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/master/camelboy/src/main/java/camelboy/CamelboyApplication.java#L46-59">Camelboy's `Greeting` class</a> uses Jackson's <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonCreator.html">`@JsonCreator`</a> and <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonProperty.html">`@JsonProperty`</a> to read in the JSON response from Expedition.

```java
    private static class Greeting {

        private String message;

        @JsonCreator
        public Greeting(@JsonProperty("message") String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }

    }
```

The Camelboy application now responds with a customizable `Greeting` when we access its `/hello` endpoint.

<pre class="terminal">
$ curl http://camelboy.wise.com/hello
Hello, camel boy!

$ curl http://camelboy.wise.com/hello?name=Jesse
Hello, Jesse!
</pre>
