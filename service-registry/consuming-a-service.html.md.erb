---
title: Consuming a Service from a Client Application
---

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-samples/greeting/tree/1.0.0">"greeting" repository</a> to follow along with the code in this subtopic._

Follow the below instructions to consume a service registered with the Service Registry from a Spring application.

## Declare Dependencies

To consume a service which is registered with a Service Registry instance, your Spring application must have `repo.spring.io/libs-milestone` listed as a repository, include the `spring-cloud-services-starter-parent` BOM, and declare `spring-cloud-services-starter-service-registry` as a dependency.

If using Maven, include in <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.0/camelboy/pom.xml#L14-L58">`pom.xml`</a>:

```xml
  <parent>
    <groupId>io.pivotal.spring.cloud</groupId>
    <artifactId>spring-cloud-services-starter-parent</artifactId>
    <version>1.0.0.RC3</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <dependencies>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-service-registry</artifactId>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>spring-milestone</id>
      <url>https://repo.spring.io/libs-milestone</url>
    </repository>
  </repositories>
```

If using Gradle, you will also need to use the <a href="https://github.com/spring-gradle-plugins/dependency-management-plugin">Gradle dependency management plugin</a>. Include in <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.0/camelboy/build.gradle#L1-L40">`build.gradle`</a>:

```groovy
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
    }
}

apply plugin: "io.spring.dependency-management"

dependencyManagement {
    imports {
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-starter-parent:1.0.0.RC3"
    }
}

repositories {
    maven {
        url "https://repo.spring.io/libs-milestone"
    }
}

dependencies {
    compile("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry")
}
```

The dependencies bring in the Spring Cloud Netflix client library for <a href="https://github.com/Netflix/eureka">Eureka</a>, as well as the Spring Cloud Connectors Cloud Foundry Connector and Spring Cloud Services Connector. See the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> subtopic for more information.

<p class='note'><strong>Important</strong>: Because of a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>, the Spring Cloud Services Starters for Service Registry will by default cause all application endpoints to be protected by HTTP Basic authentication. If you wish to disable this, please see <a href="#disable-http-basic-auth">Disable HTTP Basic Authentication</a> below.</p>

<a id="self-signed-ssl-certificate"></a>
## Add Self-Signed SSL Certificate to JVM Truststore ##

Spring Cloud Services uses HTTPS for all client-to-service communication. If your [Pivotal Cloud Foundry&reg;](https://network.pivotal.io/products/pivotal-cf) (PCF) installation is using a self-signed SSL certificate, the certificate will need to be added to the JVM truststore before your client application can use a Service Registry service instance to discover a service application.

Spring Cloud Services can add the certificate for you automatically. For this to work, you must set the ```CF_TARGET``` environment variable on your client application to the API endpoint of your Elastic Runtime instance:

<pre class="terminal">
$ cf set-env camelboy CF_TARGET https://api.wise.com
Setting env variable 'CF_TARGET' to 'https://api.wise.com' for app camelboy in org myorg / space outer as user...
OK
TIP: Use 'cf restage' to ensure your env variable changes take effect
$ cf restage camelboy
</pre>

As the output from the ```cf set-env``` command suggests, restage the application after setting the environment variable.

## Discover and Consume a Service

A consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.0/camelboy/src/main/java/camelboy/CamelboyApplication.java#L19-L25">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class CamelboyApplication {

    @Autowired
    private RestTemplate rest;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

The Expedition application is registered with the Service Registry instance as ```expedition```, so in the Camelboy application, <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.0/camelboy/src/main/java/camelboy/CamelboyApplication.java#L31-L41">the `hello()` method on the `CamelboyApplication` class</a> uses the base URI ```http://expedition``` to get a greeting message from Expedition.

<p class='note'><strong>Important</strong>: If your <a href="https://network.pivotal.io/products/pivotal-cf">Pivotal Cloud Foundry&reg;</a> installation is configured to only allow HTTPS traffic, you must specify the <code>https://</code> scheme in the base URI used by your client application. For the below example, this means that you must change the base URI from <code>http://expedition/greeting</code> to <code>https://expedition/greeting</code>.</p>

```java
    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    public String hello(@RequestParam(value="salutation",
                                        defaultValue="Hello") String salutation,
                        @RequestParam(value="name",
                                        defaultValue="camel boy") String name) {
        URI uri = UriComponentsBuilder.fromUriString("http://expedition/greeting")
            .queryParam("salutation", salutation)
            .queryParam("name", name)
            .build()
            .toUri();

        Greeting greeting = rest.getForObject(uri, Greeting.class);
        return greeting.getMessage();
    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.0/camelboy/src/main/java/camelboy/CamelboyApplication.java#L43-L56">Camelboy's `Greeting` class</a> uses Jackson's <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonCreator.html">`@JsonCreator`</a> and <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonProperty.html">`@JsonProperty`</a> to read in the JSON response from Expedition.

```java
    private static class Greeting {

        private String message;

        @JsonCreator
        public Greeting(@JsonProperty("message") String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }

    }
```

The Camelboy application now responds with a customizable ```Greeting``` when you access its ```/hello``` endpoint.

<pre class="terminal">
$ curl http://camelboy.wise.com/hello
Hello, camel boy!

$ curl http://camelboy.wise.com/hello?name=Jesse
Hello, Jesse!
</pre>

<a id="disable-http-basic-auth"></a>
## Disable HTTP Basic Authentication

The Spring Cloud Services Starter for Service Registry has a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>. Unless your application has other security configuration, this will cause all application endpoints to be protected by HTTP Basic authentication.

If you do not yet want to address application security, you can turn off Basic authentication by setting the `security.basic.enabled` property to `false`. In `application.yml`:

```yml
security:
  basic:
    enabled: false
```

You might make this setting specific to a profile (such as the `dev` profile if you want Basic authentication disabled only for development):

```yml
---

spring:
  profiles: dev

security:
  basic:
    enabled: false
```

For more information, see ["Security" in the Spring Boot Reference Guide](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-security).
