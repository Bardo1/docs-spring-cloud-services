---
title: Registering a Service
---

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-samples/greeting/tree/0.1.1-BETA">"greeting" repository</a> to follow along with the code in this subtopic._

Follow the below instructions to register a Spring application with the Service Registry.

## Declare Dependencies

To register with a Service Registry instance, a Spring application must include the `spring-cloud-services-starter-parent` BOM and declare `spring-cloud-services-starter-service-registry` as a dependency.

If using Maven, <a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/pom.xml#L14-L30">include in `pom.xml`</a>:

```xml
  <parent>
    <groupId>io.pivotal.spring.cloud</groupId>
    <artifactId>spring-cloud-services-starter-parent</artifactId>
    <version>1.0.0.M1</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  ...
  <dependencies>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-service-registry</artifactId>
    </dependency>
    ...
```

If using Gradle, <a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/build.gradle#L20-L40">include in `build.gradle`</a>:

```groovy
dependencyManagement {
    imports {
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-starter-parent:1.0.0.M1"
    }
}

...

dependencies {
    ...
    compile("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry")
}
```

(This will require <a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/build.gradle#L5-L13">use of the Gradle dependency management plugin</a>.)

You will also need to add `repo.spring.io/libs-snapshot` as a repository. <a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/pom.xml#L53-L61">Using Maven</a>:

```xml
  <repositories>
    <repository>
      <id>spring-snapshots</id>
      <url>https://repo.spring.io/libs-snapshot</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/build.gradle#L29-L34">Using Gradle</a>:

```java
repositories {
    ...
    maven {
        url "https://repo.spring.io/libs-snapshot"
    }
}
```

The dependencies bring in the Spring Cloud Netflix client library for <a href="https://github.com/Netflix/eureka">Eureka</a>, as well as the Spring Cloud Connectors Cloud Foundry Connector and Spring Cloud Services Connector. See the <a href="/spring-cloud-services/service-registry/connectors.html">Spring Cloud Connectors</a> subtopic for more information.

## Identify the Application

Your service application must <a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/src/main/java/expedition/ExpeditionApplication.java#L13-L16">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class ExpeditionApplication {
    //...
```

The `ExpeditionApplication` class also has <a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/src/main/java/expedition/ExpeditionApplication.java#L24-L28">a `/greeting` endpoint</a> which gives a JSON `Greeting` object.

```java
    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="salutation",
                              defaultValue="Hello") String salutation,
                             @RequestParam(value="name",
                              defaultValue="camel boy") String name) {
        //...
        return new Greeting(salutation, name);
    }
```

Set `spring.application.name` and `eureka.instance.hostname` to the values from the application deployment. You must also set `eureka.instance.nonSecurePort` for compatibility with Pivotal Cloud Foundry.

<a href="https://github.com/spring-cloud-samples/greeting/blob/0.1.1-BETA/expedition/src/main/resources/application.yml">In `application.yml`</a>:

```yml
spring:
  application:
    name: ${vcap.application.name}

eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80
```

You can now bind the application to a Service Registry instance. Once it has been bound and restaged and has successfully registered with the Registry, you will see it listed in the Service Registry dashboard (see the <a href="/spring-cloud-services/service-registry/using-the-dashboard.html">Using the Dashboard</a> subtopic).

<%= image_tag("service-registry/registered-service.png") %>

For information about discovering and consuming registered services, see the <a href="/spring-cloud-services/service-registry/consuming-a-service.html">Consuming a Service</a> subtopic.
