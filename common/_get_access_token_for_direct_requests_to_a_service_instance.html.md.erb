To make requests directly against a Config Server service instance's Spring Cloud Config Server backing application or a Service Registry service instance's Spring Cloud Netflix Eureka backing application, you must obtain an OAuth 2.0 token. For most Config Server endpoints and for Service Registry endpoints, you can get a client credentials access token using the binding credentials of an application that is bound to the service instance. For the `/encrypt` endpoint on a Config Server service instance, you can get a password credentials access token using the Cloud Foundry Command Line Interface tool (cf CLI).

#### Get a Client Credentials Access Token

<p class='note'><strong>Note</strong>: The following procedure uses the <a href="https://stedolan.github.io/jq/">jq</a> command-line JSON processing tool.</p>

Run `cf env`, giving the name of an application that is bound to the service instance:

<pre class="terminal">
$ cf services
Getting services in org myorg / space development as admin...
OK

name             service           plan        bound apps   last operation
config-server    p-config-server   standard    cook         create succeeded

$ cf env cook
Getting env variables for app cook in org myorg / space development as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "p-config-server": [
   {
    "credentials": {
     "access_token_uri": "https://p-spring-cloud-services.uaa.cf.wise.com/oauth/token",
     "client_id": "p-config-server-876cd13b-1564-4a9a-9d44-c7c8a6257b73",
     "client_secret": "rU7dMUw6bQjR",
     "uri": "https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com"
    },
[...]
</pre>

Then run the following Bash script, which fetches a token and uses the token to access an endpoint on a service instance backing application:

```sh
TOKEN=$(curl -k [ACCESS_TOKEN_URI] -u [CLIENT_ID]:[CLIENT_SECRET] -d grant_type=client_credentials | jq -r .access_token); \
curl -k -H "Authorization: bearer $TOKEN" -H "Accept: application/json" [URI]/[ENDPOINT] | jq
```

This script retrieves an access token using an OAuth 2 credential exchange with Cloud Foundry's UAA service. After being given an authorization token, it uses this token to make a call to the service instance's API endpoints.

In this script, replace the following placeholders with values from the `cf env` command above:

* `[ACCESS_TOKEN_URI]` with the value of `p-config-server.credentials.access_token_uri`
* `[CLIENT_ID]` with the value of `p-config-server.credentials.client_id`
* `[CLIENT_SECRET]` with the value of `p-config-server.credentials.client_secret`
* `[URI]` with the value of `p-config-server.credentials.uri`

Replace `[ENDPOINT]` with the relevant endpoint. For example:

* `application/profile` to retrieve configuration from a Config Server service instance
* `eureka/apps` to retrieve the registry from a Service Registry service instance

#### Get a Password Credentials Access Token

Run `cf env`, giving the name of an application that is bound to the service instance:

<pre class="terminal">
$ cf services
Getting services in org myorg / space development as admin...
OK

name             service           plan        bound apps   last operation
config-server    p-config-server   standard    cook         create succeeded

$ cf env cook
Getting env variables for app cook in org myorg / space development as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "p-config-server": [
   {
    "credentials": {
     "access_token_uri": "https://p-spring-cloud-services.uaa.cf.wise.com/oauth/token",
     "client_id": "p-config-server-876cd13b-1564-4a9a-9d44-c7c8a6257b73",
     "client_secret": "rU7dMUw6bQjR",
     "uri": "https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com"
    },
[...]
</pre>

Copy the value of `credentials.uri`. Then use the `cf oauth-token` command to get the token for the current session. The following example uses curl to access the `/encrypt` endpoint of a Config Server service instance (see the Git [Encryption and Encrypted Values](/spring-cloud-services/common/config-server/configuring-backends.html#git-encryption-and-encrypted-values) section of the [Configuring Backends](/spring-cloud-services/common/config-server/configuring-backends.html) topic):

<pre class="terminal">
$ curl -H "Authorization: $(cf oauth-token)" https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com/encrypt -d 'Value to be encrypted'
15f826dd703c4a3e9e1d64a5827d3b1f1584a1173c03c42d87e7480dddb07d86e009c2d78a68eee610f7f55c66894907
</pre>
