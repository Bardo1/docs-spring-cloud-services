---
title: Configuring with Git
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

## <a id="overview"></a>Overview

[Git](https://git-scm.com) is a distributed version control system (DVCS). It encourages parallel development through simplified branching and merging, optimizes performance by conducting many operations on the local copy of the repository, and uses SHA-1 hashes for checksums to assure integrity and guard against corruption of repository data. For more information about Git, see the [documentation](https://git-scm.com/doc).

Spring Cloud Config provides a Git backend so that the Spring Cloud Config Server can serve configuration stored in Git. The Spring Cloud Services Config Server supports this backend and can serve configuration stored in Git to client apps when given the URL to a Git repository (for example, the URL of a repository hosted on GitHub or Bitbucket). For more information about Spring Cloud Config's Git backend, see the [documentation](https://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html#_git_backend).

See below for information about configuring a Config Server service instance to use Git for configuration sources.

## <a id="general-configuration"></a>General Configuration

Parameters used to configure configuration sources are part of a JSON object called `git`, as in `{"git": { "uri": "https://example.com/config" } }`. General parameters used to configure the Config Server's default configuration source are listed below.

| Parameter                      | Function                                                                                                                          |
|--------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
| <code>uri</code>               | The URI (<code>http://</code>, <code>https://</code>, or <code>ssh://</code>) of a Git repository. Required                       |
| <code>label</code>             | The default "label" used if a request is received without a label. Default value: <code>master</code>                             |
| <code>searchPaths</code>       | A pattern used to search for configuration-containing subdirectories in the repository                                            |
| <code>username</code>          | The username used to access the repository (if protected by HTTP Basic authentication)                                            |
| <code>password</code>          | The password used to access the repository (if protected by HTTP Basic authentication).                                           |
| <code>refreshRate</code>       | Interval, in seconds, between refreshes of the Config Server's repository clone when a client requests configuration              |
| <code>skipSslValidation</code> | For a `https://` URI, whether to skip validation of the SSL certificate on the repository's server. Valid values: `true`, `false` |

You can set `label` to a branch name, a tag name, or a specific Git commit hash. To set `label` to point to the `develop` branch of a repository, you might configure settings as in the following:

```
cf create-service p.config-server standard config-server -c '{"git": { "uri": "https://github.com/myorg/config-repo", "label": "develop" } }'
```

To set `label` to point to the `v1.1` tag in a repository, you might configure settings as shown in the following command:

```
cf create-service p.config-server standard config-server -c '{"git": { "uri": "https://github.com/myorg/config-repo", "label": "v1.1" } }'
```

Within a client app, you can override the Config Server's `label` setting by setting the `spring.cloud.config.label` property (for example, in `bootstrap.yml`).

```yml
spring:
  cloud:
    config:
      label: v1.2
```

## <a id="ssh-repository-access"></a>SSH Repository Access

You can configure a Config Server configuration source so that the Config Server accesses it using the Secure Shell (SSH) protocol. To do so, you must specify a URI using the `ssh://` URI scheme or the Secure Copy Protocol (SCP) style URI format, and you must supply a private key. You may also supply a host key with which the server will be identified. If you do not provide a host key, the Config Server will not verify the host key of the configuration source's server.

A SSH URI must include a username, host, and repository path. This might be specified as shown in the following command:

```
cf create-service p.config-server standard config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-services-samples/cook.git"} }'
```

An equivalent SCP-style URI might be specified as shown in the following command:

```
cf create-service p.config-server standard config-server -c '{"git": { "uri": "git@github.com:spring-cloud-services-samples/cook-config.git"} }'
```

The parameters used to configure SSH for a Config Server configuration source's URI are listed below.

| Parameter                      | Function                                                                                                                                                |
|--------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>hostKey</code>           | The host key of the Git server. If you have connected to the server via git on the command line, this is in your <code>.ssh/known_hosts</code>. Do not include the algorithm prefix; this is specified in <code>hostKeyAlgorithm</code>. (Optional.)                                                                                        |
| <code>hostKeyAlgorithm</code>  | The algorithm of <code>hostKey</code>: one of "ssh-dss", "ssh-rsa", "ecdsa-sha2-nistp256", "ecdsa-sha2-nistp384", and "ecdsa-sha2-nistp521". (Required if supplying <code>hostKey</code>.)            |
| <code>privateKey</code>        | The private key that identifies the Git user, with all newline characters replaced by <code>\n</code>. Passphrase-encrypted private keys are not supported.                     |
| <code>strictHostKeyChecking</code> | Whether the Config Server should fail to start if it encounters an error when using the provided <code>hostKey</code>. (Optional.) Valid values are `true` and `false`. Default is `true`.      |

To configure a Config Server service instance that uses SSH to access a configuration source, allowing for host key verification, use the following command:

```
cf create-service p.config-server standard config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-services-samples/cook.git", "hostKey": "EXAMPLEcccc1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+...", "hostKeyAlgorithm": "ssh-rsa", "privateKey": "-----BEGIN EXAMPLE RSA PRIVATE KEY-----\nMIIJKQIB..."} }'
```

To configure a Config Server service instance that uses SSH to access a configuration source, without host key verification, use the following command:

```
cf create-service p.config-server standard config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-services-samples/cook.git", "privateKey": "-----BEGIN EXAMPLE RSA PRIVATE KEY-----\nMIIJKQIB..."} }'
```

## <a id="proxy-repository-access"></a>HTTP(S) Proxy Repository Access

You can configure a Config Server service instance to access configuration sources using an HTTP or HTTPS proxy. To do so, you must provide proxy settings in either of the `git.proxy.http` or `git.proxy.https` JSON objects. You can set the proxy host and port, the proxy username and password (if applicable), and a list of hosts which the Config Server should access outside of the proxy.

<p class='note'><strong>Note</strong>: If you are using a <a href="./composite-backends.html">composite backend</a> with multiple Git repositories that are accessed using the same proxy, you must provide the proxy's settings for each <code>git</code> object.</p>

Settings for an HTTP proxy are set in the `git.proxy.http` object. These might be set as shown in the following command:

```
cf create-service p.config-server standard config-server -c '{"git": { "proxy": { "http": { "host": "proxy.wise.com", "port": "80" } } } }'
```

Settings for an HTTPS proxy are set in the `git.proxy.https` object. These might be set as shown in the following command:

```
cf create-service p.config-server standard config-server -c '{"git": { "proxy": { "https": { "host": "secure.wise.com", "port": "443" } } } }'
```

<p class='note'><strong>Note</strong>: Some networks require that separate proxy servers are used for HTTP and HTTPS URLs. In such a case, you can set both the <code>proxy.http</code> and <code>proxy.https</code> objects.</p>

The parameters used to configure HTTP or HTTPS proxy settings for the Config Server are listed below.

| Parameter                                  | Function                                                                                                                                            |
|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>proxy.http</code>                    | A proxy object, containing HTTP proxy fields                                                                                                        |
| <code>proxy.http.host</code>               | The HTTP proxy host                                                                                                                                 |
| <code>proxy.http.port</code>               | The HTTP proxy port                                                                                                                                 |
| <code>proxy.http.nonProxyHosts</code>      | The hosts to access outside the HTTP proxy                                                                                                          |
| <code>proxy.http.username</code>           | The username to use with an authenticated HTTP proxy                                                                                                |
| <code>proxy.http.password</code>           | The password to use with an authenticated HTTP proxy                                                                                                |
| <code>proxy.https</code>                   | A proxy object, containing HTTPS proxy fields                                                                                                       |
| <code>proxy.https.host</code>              | The HTTPS proxy host                                                                                                                                |
| <code>proxy.https.port</code>              | The HTTPS proxy port                                                                                                                                |
| <code>proxy.https.nonProxyHosts</code>     | The hosts to access outside the HTTPS proxy (if <code>proxy.http.nonProxyHosts</code> is also provided, <code>http.nonProxyHosts</code> will be used instead of <code>https.nonProxyHosts</code>)      |
| <code>proxy.https.username</code>          | The username to use with an authenticated HTTPS proxy (if <code>proxy.http.username</code> is also provided, <code>http.username</code> will be used instead of <code>https.username</code>) |
| <code>proxy.https.password</code>          | The password to use with an authenticated HTTPS proxy (if <code>proxy.http.password</code> is also provided, <code>http.password</code> will be used instead of <code>https.password</code>) |

To configure a Config Server service instance that uses an HTTP proxy to access configuration sources, use the following command:

```
cf create-service p.config-server standard config-server -c '{"git": {"uri": "https://github.com/spring-cloud-services-samples/cook-config", "proxy": { "http": { "host": "proxy.wise.com", "port": "80" } } } }'
```

To configure a Config Server service instance that uses an authenticated HTTPS proxy to access configuration sources, specifying that `example.com` should be accessed outside of the proxy, use the following command:

```
cf create-service p.config-server standard config-server -c '{"git": {"uri": "https://github.com/spring-cloud-services-samples/cook-config", "proxy": { "https": { "host": "secure.wise.com", "port": "443", "username": "jim", "password": "wright62", "nonProxyHosts": "example.com" } } } }'
```
