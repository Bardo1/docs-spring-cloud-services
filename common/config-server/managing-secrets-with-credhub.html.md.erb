---
title: Managing Secrets with CredHub
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

## <a id="overview"></a>Overview

The Spring Cloud Services Config Server uses the runtime CredHub within Pivotal Cloud Foundry (PCF) for secure storage of secrets. The Config Server provides a `/secrets` endpoint for use in storing or deleting a secret within the runtime CredHub.

Secrets stored by one Config Server service instance are accessible only to that service instance, and a given Config Server service instance can add, serve, or delete only its own secrets in the runtime CredHub. Each secret stored by the Config Server is associated with an app name, a profile name (the default profile name is `default`), and a label (the default label is `master`).

See below for information about using a Config Server service instance to add or delete secrets within the runtime CredHub.

## <a id="locating-service-instance-url"></a>Locating the Service Instance URL

A Config Server service instance's Spring Cloud Config Server backing app is located in the `p-spring-cloud-services` org, in a space named after the service instance GUID. You can obtain this GUID using the cf CLI by running the `cf service` command for the service instance, passing the `--guid` flag:

<pre class="terminal">
$ cf service --guid config-server
a5782192-8036-4f57-8312-4756a2604240
</pre>

To obtain the URL of the service instance's backing app, target the `p-spring-cloud-services` org and the space named after the GUID:

<pre class="terminal">
$ cf target -o p-spring-cloud-services -s a5782192-8036-4f57-8312-4756a2604240
</pre>

Then run the `cf apps` command to find the backing app and its URL:

<pre class="terminal">
$ cf apps
Getting apps in org p-spring-cloud-services / space a5782192-8036-4f57-8312-4756a2604240 as user...
OK

name            requested state   instances   memory   disk   urls
config-server   started           1/1         1G       1G     config-server-a5782192-8036-4f57-8312-4756a2604240.apps.example.com
</pre>

## <a id="adding-a-secret"></a>Adding a Secret

You can add a secret to CredHub by making an HTTP PUT request to the Config Server's `/secrets` endpoint. The secret itself is given as JSON. You must provide an OAuth 2.0 bearer token, which can be supplied by the Cloud Foundry Command Line Interface (cf CLI) through the `cf oauth-token` command.

You must also provide:

* the relevant app name
* the relevant profile name
* the relevant label
* the name of the secret (unique for this Config Server service instance)
* the value of the secret (as JSON)

The following example command uses cURL to make the request.

<pre class="terminal">
$ curl https://[SERVER_URL]/secrets/[APP]/[PROFILE]/[LABEL]/[NAME] \
-H "Authorization: $(cf oauth-token)" -X PUT --data '{"key": "value"}' \
-H "Content-Type: application/json"
</pre>

In this example, replace the following placeholders with these values:

* `[SERVER_URL]` with the Config Server service instance backing app's URL
* `[APP]` with the relevant app name
* `[PROFILE]` with the relevant profile name
* `[LABEL]` with the relevant label
* `[NAME]` with the name of the secret

With the placeholders replaced, the example might be similar to the following:

<pre class="terminal">
$ curl https://config-server-a5782192-8036-4f57-8312-4756a2604240.apps.example.com/secrets/cook/production/mylabel/secretmenu -H "Authorization: $(cf oauth-token)" -X PUT --data '{"secretMenu": "tacos"}' -H "Content-Type: application/json"
</pre>

## <a id="removing-a-secret"></a>Removing a Secret

You can remove a secret from CredHub by making an HTTP DELETE request to the Config Server's `/secrets` endpoint. You must provide an OAuth 2.0 bearer token, which can be supplied by the cf CLI through the `cf oauth-token` command.

You must also provide:

* the relevant app name
* the relevant profile name
* the relevant label
* the name of the secret

The following example command uses cURL to make the request.

<pre class="terminal">
$ curl -k https://[SERVER_URL]/secrets/[APP]/[PROFILE]/[LABEL]/[NAME] \
-H "Authorization: $(cf oauth-token)" -X DELETE
</pre>

In this example, replace the following placeholders with these values:

* `[SERVER_URL]` with the Config Server service instance backing app's URL
* `[APP]` with the relevant app name
* `[PROFILE]` with the relevant profile name
* `[LABEL]` with the relevant label
* `[NAME]` with the name of the secret

With the placeholders replaced, the example might be similar to the following:

<pre class="terminal">
$ curl https://config-server-a5782192-8036-4f57-8312-4756a2604240.apps.example.com/secrets/cook/production/mylabel/secretmenu -H "Authorization: $(cf oauth-token)" -X DELETE
</pre>
