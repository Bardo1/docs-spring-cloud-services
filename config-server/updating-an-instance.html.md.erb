---
title: Updating an Instance
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

You can update settings on a Config Server service instance using the cf Command Line Interface tool. The `cf update-service` command can be given a `-c` flag with a JSON object containing parameters used to configure the service instance.

To update a Config Server service instance's settings, target the org and space of the service instance:

<pre class="terminal">
$ cf target -o myorg -s development

API endpoint:   https://api.cf.wise.com (API version: 2.43.0)
User:           user
Org:            myorg
Space:          development
</pre>

Then run `cf update-service SERVICE_NAME -c '{ "PARAMETER": "VALUE" }'`, where `SERVICE_NAME` is the name of the service instance, `PARAMETER` is a supported parameter, and `VALUE` is the value for the parameter. For information about supported parameters, see the next section.

## <a id="configuration-parameters"></a>Configuration Parameters

Parameters used to configure configuration sources are part of a JSON object called `git`, as in `{"git": { "uri": "http://example.com/config" } }`. For more information on the purposes of these fields, see the [The Config Server](/spring-cloud-services/config-server/server.html) topic.

General parameters used to configure the Config Server's default configuration source are listed below.

| Parameter                      | Function                                                                                                                                                |
|--------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>uri</code>               | The URI (<code>http://</code>, <code>https://</code>, or <code>ssh://</code>) of a repository that can be used as the default configuration source      |
| <code>label</code>             | The default "label" that can be used with the default repository if a request is received without a label                                               |
| <code>searchPaths</code>       | A pattern used to search for configuration-containing subdirectories in the default repository                                                          |
| <code>cloneOnStart</code>      | Whether the Config Server should clone the default repository when it starts up (by default, the Config Server will only clone the repository when configuration is first requested from the repository). Valid values are `true` and `false` |
| <code>username</code>          | The username used to access the default repository (if protected by HTTP Basic authentication)                                                          |
| <code>password</code>          | The password used to access the default repository (if protected by HTTP Basic authentication)                                                          |

The parameters used to configure the Config Server's specific configuration sources are listed below.

| Parameter                                  | Function                                                                                                                                    |
|--------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| <code>repos."name"</code>                  | A repository object, containing repository fields                                                                                           |
| <code>repos."name".pattern</code>          | A pattern for the names of applications that store configuration from this repository (if not supplied, will be <code>"name"</code>)        |
| <code>repos."name".uri</code>              | The URI (<code>http://</code>, <code>https://</code>, or <code>ssh://</code>) of this repository                                            |
| <code>repos."name".label</code>            | The default "label" to use with this repository if a request is received without a label                                                    |
| <code>repos."name".searchPaths</code>      | A pattern used to search for configuration-containing subdirectories in this repository                                                     |
| <code>repos."name".cloneOnStart</code>     | Whether the Config Server should clone this repository when it starts up (by default, the Config Server will only clone the repository when configuration is first requested from the repository). Valid values are `true` and `false` |
| <code>repos."name".username</code>         | The username used to access this repository (if protected by HTTP Basic authentication)                                                     |
| <code>repos."name".password</code>         | The password used to access this repository (if protected by HTTP Basic authentication)                                                     |
| <code>repos."name".hostKey</code>          | The host key used by the Config Server to access this repository (if accessing via SSH)                                                     |
| <code>repos."name".hostKeyAlgorithm</code> | The algorithm of <code>hostKey</code>: one of "ssh-dss", "ssh-rsa", "ecdsa-sha2-nistp256", "ecdsa-sha2-nistp384", and "ecdsa-sha2-nistp521" |
| <code>repos."name".privateKey</code>       | The private key corresponding to <code>hostKey</code>, with all newline characters replaced by <code>\n</code>                              |

The parameters used to configure any proxy settings for the Config Server are listed below.

| Parameter                                  | Function                                                                                                                                    |
|--------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| <code>proxy.http</code>                    | A proxy object, containing HTTP proxy fields                                                                                                |
| <code>proxy.http.host</code>               | The HTTP proxy host                                                                                                                         |
| <code>proxy.http.port</code>               | The HTTP proxy port                                                                                                                         |
| <code>proxy.http.nonProxyHosts</code>      | The hosts to access outside the HTTP proxy                                                                                                  |
| <code>proxy.http.username</code>           | The username to use with an authenticated HTTP proxy                                                                                        |
| <code>proxy.http.password</code>           | The password to use with an authenticated HTTP proxy                                                                                        |
| <code>proxy.https</code>                   | A proxy object, containing HTTPS proxy fields                                                                                               |
| <code>proxy.https.host</code>              | The HTTPS proxy host                                                                                                                        |
| <code>proxy.https.port</code>              | The HTTPS proxy port                                                                                                                        |
| <code>proxy.https.nonProxyHosts</code>     | The hosts to access outside the HTTPS proxy                                                                                                 |
| <code>proxy.https.username</code>          | The username to use with an authenticated HTTPS proxy                                                                                       |
| <code>proxy.https.password</code>          | The password to use with an authenticated HTTPS proxy                                                                                       |

<p class='note'><strong>Important</strong>: Config Server for <a href="https://network.pivotal.io/products/pivotal-cf">Pivotal Cloud Foundry</a> does not support use of a private Git repository accessed via an authenticated proxy server as a configuration source at this time.</p>

Other parameters accepted for the Config Server are listed below.

| Parameter            | Function                                                                                   | Example                          |
|----------------------|--------------------------------------------------------------------------------------------|----------------------------------|
| <code>count</code>   | The number of nodes to provision: 1 by default, more for running in high-availability mode | <code>'{"count": 3}'</code>      |
| <code>upgrade</code> | Whether to upgrade the instance                                                            | <code>'{"upgrade": true}'</code> |

To update a service instance, setting the configuration sources and specifying that the default configuration source Git repository should be cloned when the Config Server starts up, run:

<pre class="terminal">
$ cf update-service config-server -c '{"git": { "uri": "https://github.com/spring-cloud-samples/config-repo", "cloneOnStart": "true", "repos": { "cook": { "pattern": "cook*", "uri": "https://github.com/spring-cloud-samples/cook-config" } } } }'
Updating service instance config-server as admin...
OK

Update in progress. Use 'cf services' or 'cf service config-server' to check operation status.
</pre>

To update a service instance and set the count of instances for running in high-availability mode, run:

<pre class="terminal">
$ cf update-service config-server -c '{"count": 3}'
Updating service instance config-server as admin...
OK

Update in progress. Use 'cf services' or 'cf service config-server' to check operation status.
</pre>

As the command output suggests, you can use the `cf services` or `cf service` commands to check the status of the service instance. When the update is complete, the `cf service` command will give a status of `update succeeded`:

<pre class="terminal">
$ cf service config-server

Service instance: config-server
Service: p-config-server
Bound apps:
Tags:
Plan: standard
Description: Config Server for Spring Cloud Applications
Documentation url: http://docs.pivotal.io/spring-cloud-services/
Dashboard: https://spring-cloud-broker.apps.wise.com/dashboard/p-config-server/e2615a44-66f5-4fda-9ddc-079af1db9ae4

Last Operation
Status: update succeeded
Message:
Started: 2016-06-24T21:11:53Z
Updated: 2016-06-24T21:13:59Z
</pre>

<p class='note'><strong>Important</strong>: The <code>cf service</code> and <code>cf services</code> commands may report an <code>update succeeded</code> status even if the Config Server cannot initialize using the provided settings. For example, given an invalid URI for a configuration source, the service instance may still be restarted and have an <code>update succeeded</code> status. <br /> <br /> If the service instance does not appear to be functioning correctly after an update, you can visit its dashboard to double-check that the provided settings are valid and accurate. See the <a href="/spring-cloud-services/config-server/using-the-dashboard.html">Using the Dashboard</a> topic.</p>

The service instance is now updated and ready to be used. For information about using an application to access configuration values served by a Config Server service instance, see the <a href="/spring-cloud-services/config-server/writing-client-applications.html">Writing Client Applications</a> topic.

### <a id="ssh-repository-access"></a>SSH Repository Access

You can configure a Config Server configuration source so that the Config Server accesses it using the Secure Shell (SSH) protocol. To do so, you must specify a URI using the `ssh://` URI scheme or the Secure Copy Protocol (SCP) style URI format, and you must supply a private key. You may also supply a host key with which the server will be identified. If you do not provide a host key, the Config Server will not verify the host key of the configuration source's server.

A SSH URI must include a username, host, and repository path. This might be specified as shown in the following JSON:

```
'{"git": { "uri": "ssh://git@github.com/spring-cloud-samples/cook.git"} }'
```

An equivalent SCP-style URI might be specified as shown in the following JSON:

```
'{"git": { "uri": "git@github.com:spring-cloud-samples/cook-config.git"} }'
```

The parameters used to configure SSH for a Config Server configuration source's URI are listed below.

| Parameter                      | Function                                                                                                                                                |
|--------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>hostKey</code>           | The host key corresponding to <code>privateKey</code> (optional)                                                                                        |
| <code>hostKeyAlgorithm</code>  | The algorithm of <code>hostKey</code>: one of "ssh-dss", "ssh-rsa", "ecdsa-sha2-nistp256", "ecdsa-sha2-nistp384", and "ecdsa-sha2-nistp521" (required if supplying <code>hostKey</code>)            |
| <code>privateKey</code>        | The private key, with all newline characters replaced by <code>\n</code>                     |

To update a Config Server service instance to use SSH to access a configuration source, allowing for host key verification, run:

<pre class="terminal">
$ cf update-service config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-samples/cook.git", "hostKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC7+mgZfOyxx6MX/yG+d9R2ogcm76...", "hostKeyAlgorithm": "ssh-rsa", "privateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIB..."} }'
</pre>

To update a Config Server service instance to use SSH to access a configuration source, without host key verification, run:

<pre class="terminal">
$ cf update-service config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-samples/cook.git", "privateKey": "-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIB..."} }'
</pre>
