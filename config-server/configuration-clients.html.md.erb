---
title: Configuration Clients
---

Config Server client applications can be written in any language. The interface for retrieving configuration is HTTP, and the endpoints are protected by OAuth 2.0.

To be given a base URI and client credentials for accessing a Config Server instance, a Cloud Foundry application needs to bind to the instance.

## Bind an Application to a Service Instance ##

Visit the appropriate org and space in Apps Manager, and select an application from the **Applications** list.

<%= image_tag("config-server/1-select-application.png") %>

In the **Services** tab, click the **Bind a Service** button. Select a service from the dropdown list and click **Bind**.

<%= image_tag("config-server/2-bind-service.png") %>

Alternatively, you can use the cf Command Line Interface tool. Run the command `cf bind-service`, specifying the application name and service name.

<pre class="terminal">
$ cf bind-service myapp My\ Config\ Server
Binding service My Config Server to app myapp in org myorg / space development as
user...
OK
TIP: Use 'cf restage myapp' to ensure your env variable changes take effect
</pre>

Then, as the command output suggests, run the command `cf restage` to restage the application before proceeding. (See the next section for information about the environment variable to which the command output refers.)

<pre class="terminal">
$ cf restage myapp
Restaging app myapp in org myorg / space development as user...
...
</pre>

## Configuration Requests and Responses

After an application is bound to the service instance, the application's `VCAP_SERVICES` environment variable will contain an entry under the key ```p-config-server```. You can view the application's environment variables using the cf CLI:

<pre class="terminal">
$ cf env myapp
Getting env variables for app myapp in org myorg / space development as user...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "p-config-server": [
   {
    "credentials": {
     "access_token_uri": "https://p-spring-cloud-services.uaa.wise.com/oauth/token",
     "client_id": "p-config-server-a74fc0a3-a7c3-43b6-81f9-9eb6586dd3ef",
     "client_secret": "e8KF1hXvAnGd",
     "uri": "https://config-ba6b6079-163b-45d2-8932-e2eca0d1e49a.wise.com"
    },
    "label": "p-config-server",
    "name": "My Config Server",
    "plan": "standard",
    "tags": [
     "configuration",
     "spring-cloud"
    ]
   }
  ]
 }
}
</pre>

The following is an example of a response from the Config Server to a request using the path ```/myapp/production``` (where the application is ```myapp``` and the profile is ```production```).

```
{
  "name":"myapp",
  "profiles":[
    "production"
  ],
  "label":"master",
  "propertySources":[
    {
      "name":"https://github.com/myorg/configurations/myapp-production.yml",
      "source":{
        "hello.message":"Hello Production!"
      }
    },
    {
      "name":"https://github.com/myorg/configurations/myapp.yml",
      "source":{
        "hello.message":"Hello Default!"
      }
    }
  ]
}
```

As shown in the above example, the Config Server may include multiple values for the same property in its response. In that case, the client application must decide how to interpret the response; the intent is that the first value in the list should take precedence over the others. Spring applications will do this for you automatically.

### Spring Client Applications ###

A Spring application can use a Config Server as a <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html">property source</a>. Properties from a Config Server will override those defined locally (e.g. via an `application.yml` in the classpath).

The application requests properties from the Config Server using a path such as ```/{application}/{profile}/[{label}]``` (see the <a href="/spring-cloud-services/config-server/server.html#request-paths">Request Paths</a> section of the <a href="/spring-cloud-services/config-server/server.html">The Config Server</a> subtopic). It will derive values for these three parameters from the following properties:


* `{application}`: ```spring.cloud.config.name``` or ```spring.application.name```.
* `{profile}`: ```spring.cloud.config.env``` or ```spring.profiles.active```.
* `{label}`: ```spring.cloud.config.label``` if it is defined; otherwise, the Config Server's default label.

These values can be specified in an `application.yml` or `application.properties` file on the classpath, via a system property (as in `-Dspring.profiles.active=production`), or (more commonly in Cloud Foundry) via an environment variable:

<pre class="terminal">
$ cf set-env myapp SPRING_PROFILES_ACTIVE production
</pre>

Given the above example response for the request path ```/myapp/production```, a Spring application would give the two Config Server property sources precedence over other property sources. This means that properties from `https://github.com/myorg/configurations/myapp-production.yml` would have precedence over properties from `https://github.com/myorg/configurations/myapp.yml`, which would have precedence over properties from the application's other property sources (such as `classpath:application.yml`).

For a specific example of using a Spring application as a Config Server client, see the <a href="/spring-cloud-services/config-server/writing-a-spring-client.html">Writing a Spring Client</a> subtopic.
